package lesson_15

/* абстрактный класс предназначен для описания общих данных будущих экземпляров
   может иметь абстрактные св-ва (не проинициализированны - нет круглых скобок) и методы (не имеют тела)
 */

abstract class SpaceShuttle : Movable, Shootable {    // добавил интерфейсы в класс (class Upsilon будет подсвечен красным )
    abstract val tankSize: Int  //абстр поле          // нужно будет через подсказку среды добавить туда методы из интерфейсов
    abstract fun runDiagnostic()//абстр метод
}

/* класс потомок - в нем нужно реализовать все абстрактные св-ва и методы
   если сперва написать так: class Upsilon : SpaceShuttle() - будет ошибка, нужно переопределить этот класс к суперклассу.
   нужно прописать override - можно с помощью подсказок среды.

   ИНТЕРФЕЙСЫ можно применять там, где нужно реализовать часть особенностей создаваемого экземпляра.
   Создавать на его основе объекты - нельзя.
   Все методы в интерфейсах - абстрактные.
   В основном в них описывается функционал, сгруппированный по смыслу (его можно включать во множество классов).
   Для класса можно реализовать несколько интерфейсов (перечисляются через запятую - множественное наследование, см выше) -
    - сам же класс можно унаследовать только от одного класса-родителя.
 */

class Upsilon(override val tankSize: Int) : SpaceShuttle() {
    override fun runDiagnostic() {
        println("Диагностиа запущена") //
    }

    override fun prepareForTakeOff() {
        println("развернуть крылья")  // т.к. методы без тел, отображается TODO ("Not yet implemented") - можно вписать нужную реализацию
    }

    override fun prepareForLanding() {
        println("свернуть крылья")
    }

    override fun startShooting() {
        println("начать стрельбу")
    }

    override fun reloadGuns() {
        println("перезарядка")
    }
}